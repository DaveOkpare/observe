services:
  ingestor:
    build: .
    ports: ["8000:8000"]
    environment:
      DATABASE_URL: postgresql://postgres:postgres@pgbouncer:6432/observability
    depends_on:
      pgbouncer:
        condition: service_started            # wait for container to start (app will still retry)
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=observability
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/00-schema.sql:ro
    command: >
      postgres
      -c shared_buffers=1GB
      -c max_connections=500
      -c wal_buffers=64MB
      -c effective_cache_size=2GB
    healthcheck:
      # Postgres has pg_isready, so we can use it here
      test: ["CMD-SHELL", "pg_isready -U postgres -d observability -h 127.0.0.1 -p 5432"]
      interval: 3s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  pgbouncer:
    image: edoburu/pgbouncer:latest
    # Expose on 6432 and have the container listen on 6432 too
    ports:
      - "6432:6432"
    environment:
      # simplest: hand it a DATABASE_URL; the image parses it
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/observability
      # auth type that matches modern Postgres defaults
      - AUTH_TYPE=scram-sha-256
      # start with session to avoid prepared-statement issues
      - POOL_MODE=session
      # listen on 6432 inside the container
      - LISTEN_PORT=6432
      # good default; avoids noisy “extra_float_digits” param problems
      - IGNORE_STARTUP_PARAMETERS=extra_float_digits
      # useful for SHOW STATS etc.
      - ADMIN_USERS=postgres
      # optional: cap to something reasonable
      - MAX_CLIENT_CONN=400
      - DEFAULT_POOL_SIZE=50
    depends_on:
      postgres:
        condition: service_healthy
    # edoburu image is tiny; it doesn't ship pg_isready—skip container HC
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888
      - 8888:8888
      - 8889:8889
      - 13133:13133
      - 4317:4317
      - 4318:4318
      - 55679:55679
    depends_on:
      - postgres
      - ingestor

volumes:
  postgres_data:
